<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>skywalkerlee</title>
  <subtitle>may the force be with you</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-01T06:58:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>skywalkerlee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现一个分布式消息队列(ohmq)</title>
    <link href="http://yoursite.com/2017/04/01/ohmq/"/>
    <id>http://yoursite.com/2017/04/01/ohmq/</id>
    <published>2017-04-01T11:29:22.000Z</published>
    <updated>2017-04-01T06:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ohmq is a distributed message queue written in golang</p>
</blockquote>
<p><code>ohmq</code>(ohmyqueue)是一个使用<code>etcd</code>做coordinator的分布式消息队列，<a href="https://github.com/skywalkerlee/ohmyqueue" target="_blank" rel="external">源码地址</a>。</p>
<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="/images/arch.png" alt=""></p>
<a id="more"></a>
<h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><ul>
<li>使用gRPC进行通信,protobuf作为数据交换格式,支持TLS</li>
<li>消息具有生命周期,过期数据会被清理,在生命周期内可以多次被消费</li>
<li>支持水平扩展</li>
<li>支持故障恢复</li>
</ul>
<h1 id="DONE-list"><a href="#DONE-list" class="headerlink" title="DONE list"></a>DONE list</h1><ul>
<li>Pub/Sub</li>
<li>过期数据清理</li>
<li>backend storage使用rocks</li>
<li>水平扩展</li>
</ul>
<h1 id="TODO-list"><a href="#TODO-list" class="headerlink" title="TODO list"></a>TODO list</h1><ul>
<li>consumer group (load balance)</li>
<li>backend storage支持bitcask</li>
<li>cluster manager</li>
<li>重构数据结构</li>
<li>更改客户端连接逻辑</li>
</ul>
<h1 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h1><p><code>etcd</code>是一个基于<code>raft</code>算法的高可用键值存储系统,主要用于共享配置和服务发现。<br><code>ohmq</code>使用<code>etcd</code>做服务发现，服务协调和选主等。</p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><p>节点启动时去<code>etcd</code>注册自己的相关信息。</p>
<h2 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h2><p><code>topic</code>创建需要在<code>etcd</code>注册，每个节点都监控<code>topic</code>，如果发现有新<code>topic</code>注册或<code>topicleader</code>消失则当前服务的<code>topic</code>数量少于<code>topic</code>平均数量的节点去竞选为<code>topicleader</code>。每个<code>topicleader</code>对该<code>topic</code>进行读写服务，并把数据发送到其他非<code>leader</code>节点进行备份。</p>
<p>关键代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(broker *Broker)</span> <span class="title">watchTopics</span><span class="params">()</span></span> &#123;</div><div class="line">	resp, _ := broker.Client.Get(context.TODO(), <span class="string">"topicname"</span>, clientv3.WithPrefix())</div><div class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> resp.Kvs &#123;</div><div class="line">		broker.topics.AddTopic(<span class="keyword">string</span>(v.Key[<span class="number">9</span>:]))</div><div class="line">		tlresp, _ := broker.Client.Get(context.TODO(), <span class="string">"topicleader"</span>+<span class="keyword">string</span>(v.Key[<span class="number">9</span>:]))</div><div class="line">		<span class="keyword">if</span> tlresp.Count == <span class="number">0</span> &#123;</div><div class="line">			<span class="keyword">go</span> broker.voteTopicleader(<span class="keyword">string</span>(v.Key[<span class="number">9</span>:]))</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	wch := broker.Client.Watch(context.TODO(), <span class="string">"topicname"</span>, clientv3.WithPrefix())</div><div class="line">	<span class="keyword">for</span> wresp := <span class="keyword">range</span> wch &#123;</div><div class="line">		<span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</div><div class="line">			<span class="keyword">switch</span> ev.Type.String() &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"PUT"</span>:</div><div class="line">				broker.topics.AddTopic(<span class="keyword">string</span>(ev.Kv.Key[<span class="number">9</span>:]))</div><div class="line">				resp, _ := broker.Client.Get(context.TODO(), <span class="string">"brokerleader"</span>, clientv3.WithPrefix())</div><div class="line">				<span class="keyword">var</span> sum <span class="keyword">int</span></div><div class="line">				<span class="keyword">for</span> _, v := <span class="keyword">range</span> resp.Kvs &#123;</div><div class="line">					tmp, _ := strconv.Atoi(<span class="keyword">string</span>(v.Value))</div><div class="line">					sum += tmp</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> <span class="built_in">len</span>(broker.leaders) &lt;= sum/<span class="keyword">int</span>(resp.Count) &#123;</div><div class="line">					<span class="keyword">go</span> broker.voteTopicleader(<span class="keyword">string</span>(ev.Kv.Key[<span class="number">9</span>:]))</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="producer"><a href="#producer" class="headerlink" title="producer"></a>producer</h2><p><code>producer</code>查询<code>etcd</code>获得<code>topicleader</code>地址，连接该地址进行发布。发布成功后ohmq会更改该<code>topic</code>在<code>etcd</code>中的状态。</p>
<h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><p><code>producer</code>查询<code>etcd</code>获得<code>topicleader</code>地址，连接该地址并对<code>topic</code>状态进行监控，<code>topic</code>发生改变则去<code>ohmq</code>进行拉取。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ohmq is a distributed message queue written in golang&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ohmq&lt;/code&gt;(ohmyqueue)是一个使用&lt;code&gt;etcd&lt;/code&gt;做coordinator的分布式消息队列，&lt;a href=&quot;https://github.com/skywalkerlee/ohmyqueue&quot;&gt;源码地址&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/arch.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="轮子" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="mq" scheme="http://yoursite.com/tags/mq/"/>
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="raft" scheme="http://yoursite.com/tags/raft/"/>
    
      <category term="etcd" scheme="http://yoursite.com/tags/etcd/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="ohmq" scheme="http://yoursite.com/tags/ohmq/"/>
    
      <category term="ohmyqueue" scheme="http://yoursite.com/tags/ohmyqueue/"/>
    
  </entry>
  
  <entry>
    <title>nsq使用记录</title>
    <link href="http://yoursite.com/2017/03/31/nsq-try/"/>
    <id>http://yoursite.com/2017/03/31/nsq-try/</id>
    <published>2017-03-31T11:03:14.000Z</published>
    <updated>2017-03-31T05:57:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>NSQ是一个基于Go语言的分布式实时消息平台，它基于MIT开源协议发布，代码托管在<a href="https://github.com/nsqio/nsq" target="_blank" rel="external">GitHub</a>。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="nsqd"><a href="#nsqd" class="headerlink" title="nsqd"></a>nsqd</h2><p><code>nsqd</code>是一个守护进程，负责接收，排队，投递消息给客户端。<br>它可以独立运行，不过通常它是由<code>nsqlookupd</code>实例所在集群配置的。</p>
<h2 id="nsqlookupd"><a href="#nsqlookupd" class="headerlink" title="nsqlookupd"></a>nsqlookupd</h2><p><code>nsqlookupd</code>是一个coordinator。客户端通过查询<code>nsqlookupd</code>来发现指定<code>topic</code>的生产者，和<code>nsqd</code>节点的<code>topic</code>和<code>channel</code>信息。</p>
<h2 id="nsqadmin"><a href="#nsqadmin" class="headerlink" title="nsqadmin"></a>nsqadmin</h2><p><code>nsqadmin</code>是一个web服务器，用来汇集集群的实时统计，并执行不同的管理任务。<br><a id="more"></a></p>
<h1 id="nsqd-1"><a href="#nsqd-1" class="headerlink" title="nsqd"></a>nsqd</h1><p>nsqd被设计成可以同时处理多个数据流的模式。<br>在nsqd中，数据流被称为<code>topic</code>，每个<code>topic</code>有1个或多个<code>channel</code>,每个<code>channel</code>都拥有一份<code>topic</code>中所有消息的拷贝。<br>每个<code>topic</code>和每个<code>channel</code>的缓存相互独立。</p>
<h2 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h2><p><code>topic</code>由第一次发布或第一次订阅创建。</p>
<h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p><code>channel</code>由第一次订阅创建。<br>消费者订阅<code>topic</code>时要指定所订阅的<code>channel</code>。<br>当有消息被发布时,每个<code>channel</code>随机选择一个订阅该<code>channel</code>的消费者进行数据推送。<br>如果所有的消费者都订阅了相同的<code>channel</code>就成了<code>队列模式</code>。</p>
<h1 id="上码"><a href="#上码" class="headerlink" title="上码"></a>上码</h1><p><code>pub</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	logs.EnableFuncCallDepth(<span class="literal">true</span>)</div><div class="line">	logs.SetLogFuncCallDepth(<span class="number">3</span>)</div><div class="line">	log := logs.GetLogger()</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">3</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"args error"</span>)</div><div class="line">	&#125;</div><div class="line">	producer, err := nsq.NewProducer(<span class="string">"172.27.31.156:4150"</span>, nsq.NewConfig())</div><div class="line">	<span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> producer.Stop()</div><div class="line">	producer.SetLogger(log, nsq.LogLevelError)</div><div class="line">	err = producer.Ping()</div><div class="line">	<span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	producer.Publish(os.Args[<span class="number">1</span>], []<span class="keyword">byte</span>(os.Args[<span class="number">2</span>]))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>sub</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	logs.EnableFuncCallDepth(<span class="literal">true</span>)</div><div class="line">	logs.SetLogFuncCallDepth(<span class="number">3</span>)</div><div class="line">	log := logs.GetLogger()</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">3</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"args error"</span>)</div><div class="line">	&#125;</div><div class="line">	consumer, err := nsq.NewConsumer(os.Args[<span class="number">1</span>], os.Args[<span class="number">2</span>], nsq.NewConfig())</div><div class="line">	<span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">		log.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> consumer.Stop()</div><div class="line">	consumer.SetLogger(log, nsq.LogLevelError)</div><div class="line">	consumer.AddHandler(&amp;sub&#123;&#125;)</div><div class="line">	err = consumer.ConnectToNSQD(<span class="string">"172.27.31.156:4150"</span>)</div><div class="line">	<span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</div><div class="line">		log.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	sigch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</div><div class="line">	signal.Notify(sigch, syscall.SIGTERM, syscall.SIGINT, syscall.SIGKILL)</div><div class="line">	&lt;-sigch</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> sub <span class="keyword">struct</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sub)</span> <span class="title">HandleMessage</span><span class="params">(message *nsq.Message)</span> <span class="title">error</span></span> &#123;</div><div class="line">	logs.Debug(<span class="keyword">string</span>(message.Body))</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSQ是一个基于Go语言的分布式实时消息平台，它基于MIT开源协议发布，代码托管在&lt;a href=&quot;https://github.com/nsqio/nsq&quot;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;h2 id=&quot;nsqd&quot;&gt;&lt;a href=&quot;#nsqd&quot; class=&quot;headerlink&quot; title=&quot;nsqd&quot;&gt;&lt;/a&gt;nsqd&lt;/h2&gt;&lt;p&gt;&lt;code&gt;nsqd&lt;/code&gt;是一个守护进程，负责接收，排队，投递消息给客户端。&lt;br&gt;它可以独立运行，不过通常它是由&lt;code&gt;nsqlookupd&lt;/code&gt;实例所在集群配置的。&lt;/p&gt;
&lt;h2 id=&quot;nsqlookupd&quot;&gt;&lt;a href=&quot;#nsqlookupd&quot; class=&quot;headerlink&quot; title=&quot;nsqlookupd&quot;&gt;&lt;/a&gt;nsqlookupd&lt;/h2&gt;&lt;p&gt;&lt;code&gt;nsqlookupd&lt;/code&gt;是一个coordinator。客户端通过查询&lt;code&gt;nsqlookupd&lt;/code&gt;来发现指定&lt;code&gt;topic&lt;/code&gt;的生产者，和&lt;code&gt;nsqd&lt;/code&gt;节点的&lt;code&gt;topic&lt;/code&gt;和&lt;code&gt;channel&lt;/code&gt;信息。&lt;/p&gt;
&lt;h2 id=&quot;nsqadmin&quot;&gt;&lt;a href=&quot;#nsqadmin&quot; class=&quot;headerlink&quot; title=&quot;nsqadmin&quot;&gt;&lt;/a&gt;nsqadmin&lt;/h2&gt;&lt;p&gt;&lt;code&gt;nsqadmin&lt;/code&gt;是一个web服务器，用来汇集集群的实时统计，并执行不同的管理任务。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mq" scheme="http://yoursite.com/tags/mq/"/>
    
      <category term="消息" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF/"/>
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="nsq" scheme="http://yoursite.com/tags/nsq/"/>
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>博客新开</title>
    <link href="http://yoursite.com/2017/03/30/first/"/>
    <id>http://yoursite.com/2017/03/30/first/</id>
    <published>2017-03-30T15:18:39.000Z</published>
    <updated>2017-03-30T07:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客重新开启，记录学习生活~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客重新开启，记录学习生活~&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
